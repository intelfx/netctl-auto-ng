#!/bin/bash

# Primary debug hook
[[ -e "/tmp/.netctl-auto-ng-debug" ]] && { QUIET=0; NETCTL_DEBUG=1; }

. /usr/lib/network/globals
. "$CONN_DIR/wireless"

NAW_VERSION=unpackaged

NOLOCK=1 # locking is slow (so possibly incorrectly implemented) and must be fixed someday
         # or not -- systemd already allows access serialization, doesn't it?..

AUTOWIFI="/usr/sbin/wpa_actiond"
ACTION_SCRIPT="/usr/lib/network/auto-ng.action"
WPA_CTRL_PATH="/run/wpa_supplicant"
CONFIG="/etc/conf.d/netctl-auto-ng"

function version() {
	echo "netctl-auto-ng $NAW_VERSION"
}

# Locking and PID-files
#
LOCKTIMEOUT=10
EXIT_SIGNALS=(TERM HUP INT QUIT)

function release_lock() {
	if ! (( NOLOCK )); then
		report_debug "Dropping lock $LOCK_FILE"
		exec 4<&-
	fi
}

function do_trap() {
	report_debug "Installing termination handlers (signals ${EXIT_SIGNALS[*]}) to function $1"
	trap "$1" "${EXIT_SIGNALS[@]}"
}

function do_lock() {
	if ! (( NOLOCK )); then
		report_debug "Locking file $LOCK_FILE"
		touch "$LOCK_FILE"           || return $?
		exec 4<"$LOCK_FILE"          || return $?
		flock -x -w "$LOCKTIMEOUT" 4 || return $?
		trap release_lock 0
	fi
}

function check_pidfile() {
	report_debug "Checking PID-file $1"
	pgrep -F "$1" &>/dev/null
}

# Systemd integration functions
#

function systemd_run() {
	local SYSTEMD_UNIT="netctl-auto-ng@${INTERFACE}.service"
	systemctl "$@" "$SYSTEMD_UNIT"
}

function systemd_list_interfaces() {
	LC_ALL=C systemctl -t service --no-legend --no-pager "$@" list-units | while read unit load active sub description; do
		if [[ "$unit" =~ netctl-auto-ng@(.*)\.service ]]; then
			echo "${BASH_REMATCH[1]} $active"
		fi
	done
}

# Status reporting primitives
#
function quit() {
	if (( $1 )); then
		report_error "$2"
	else
		report_notice "$2"
	fi
	exit $1
}

function report_aligned() {
	(( QUIET )) && return

	local align_column=25
	local left_margin="${3:-0}"
	local key_len="$(( ${#1} + left_margin ))"

	local separator
	if [[ -t 1 ]]; then
		separator="$( tput hpa $align_column )"
	else
		separator="$( printf "%$(( align_column - key_len - 2 ))s" )"
	fi

	echo -n "$( printf "%${left_margin}s" )"
	report_notice "${1}: ${separator}${2}"
}

# Helpers for reporting status
#
function ignore_req() {
	quit 0 "Ignoring request (requested at least $REQ_STATE, now $STATE)"
}

function noop() {
	quit 0 "Nothing to do (asked to $REQ_MODE, now $STATE)"
}

function couldnot() {
	quit 1 "Could not $1 in order to $REQ_MODE"
}

# Auxiliary subroutines
#

function need_exec_from_config() {
	local DO_CMD=$(eval echo '$NAW_DO_CMD_'"$1")
	report_debug "Checking requirement of execution of command $1: variable name is NAW_DO_CMD_$1, result is $DO_CMD"
	if (( "${DO_CMD:-0}" )); then
		return 0
	else
		return 1
	fi
}

function get_cmd_from_config() {
	local CMD=$(eval echo '$NAW_CMD_'"$1")
	report_debug "Querying command $1: variable name is NAW_CMD_$1, result is $CMD"
	[[ -n "$2" ]] && CMD="$CMD $2"
	echo "$CMD"
}

function exec_from_config() {
	if need_exec_from_config "$1"; then
		local CMD="$(get_cmd_from_config "$@") $INTERFACE"
		report_debug "Executing self via reparse: $CMD"
		parse_parameters $CMD
	else
		report_debug "Execution of command $1 disabled by config"
		parse_parameters noop
		return 0
	fi
}

function prepare_wpa_config() {
	report_debug "Building wpa_supplicant configuration for $INTERFACE"

	### from netctl:netctl-auto -- WPA config generation

	# HACK: wpa_make_config_file can't overwrite.
	local WPA_CONFIG_FILE="$STATE_DIR/wpa_supplicant_${INTERFACE}.conf"
	rm -f "$WPA_CONFIG_FILE"

	if ! WPA_CONF=$(wpa_make_config_file "$INTERFACE"); then
		return 1
	fi

	list_profiles | while read -r profile; do
		report_debug "Examining profile '$profile'"
		(
		  source "$PROFILE_DIR/$profile"
		  [[ $Interface == "$INTERFACE" ]] || exit 1
		  is_yes "${ExcludeAuto:-no}" && exit 1
		  [[ $Connection != "wireless" ]] && exit 1
		  : ${Security:=none}
		  [[ $Security == "wpa-config" ]] && exit 1

          printf "%s\n" "network={" "$(wpa_make_config_block)" "id_str=\"$profile\"" "}" >> "$WPA_CONF"
		  report_notice "Included profile '$profile'"
		)
	done

	return 0
}

function write_runfile() {
	# This writes the run-file on default halt/suspend operations.
	rm -f "$RUN_FILE"
	echo "$MODE" >> "$RUN_FILE"
}

function write_runfile_outer() {
	# This writes the run-file when passing to the inner layer.
	rm -f "$RUN_FILE"
	(( QUIET ))                 && echo "--quiet"      >> "$RUN_FILE"
	[[ "$REQ_STATE" != "halted" ]] && echo "--$REQ_STATE" >> "$RUN_FILE"
	                                  echo "$REQ_MODE"    >> "$RUN_FILE"
	                                  echo "--nolock"     >> "$RUN_FILE"
}

# Auxiliary logic functions
#

function do_bootup() {
	local RUN_CMD
	is_on_ac_power && RUN_CMD="BOOT_AC" || RUN_CMD="BOOT_BATTERY"
	exec_from_config "$RUN_CMD"
}

function do_power() {
	local RUN_CMD
	is_on_ac_power && RUN_CMD="SW_AC" || RUN_CMD="SW_BATTERY"
	exec_from_config "$RUN_CMD"
}

function do_runfile() {
	if (( INNER )) && [[ -r "$RUN_FILE" ]]; then
		local CMD="$(< "$RUN_FILE" )"
		local _IS_PARSING_RUNFILE=1
		rm -f "$RUN_FILE"
		report_notice "Executing run-file: $CMD"
		parse_parameters $CMD
	else
		report_debug "Run-file does not exist or not in inner mode, skipping"
		return 1
	fi
}

# Network-related functions
# NOTE: taken from netctl:src/lib/network
# TODO: reuse them directly (mail maintainers to separate functions from main code)
#

## Check if a string represents a network interface
# $1: potential interface name
is_interface() {
	# Strip any old school alias specifier
	[[ -d "/sys/class/net/${1%%:?*}" ]]
}

## Check if an interface is up
# $1: interface name
interface_is_up() {
	local flags
	read flags < "/sys/class/net/${1%%:?*}/flags"
	# IFF_UP is defined as 0x1 in linux/if.h
	(( flags & 0x1 ))
}

## Activate an interface
# $1: interface name
bring_interface_up() {
	local interface=$1
	ip link set dev "$interface" up &>/dev/null
	timeout_wait "${TimeoutUp:-5}" 'interface_is_up "$interface"'
}

## Deactivate an interface
# $1: interface name
bring_interface_down() {
	local interface=$1
	ip addr flush dev "$interface" &>/dev/null
	ip link set dev "$interface" down &>/dev/null
	# We reuse the up timeout (down normally is faster)
	timeout_wait "${TimeoutUp:-5}" '! interface_is_up "$interface"'
}

## Deactivate an interface and its RF killswitch
# NOTE: my own addition, not from netctl
# $1: interface name
bring_interface_down_with_rfkill() {
	bring_interface_down "$@" || return "$?"

	if [[ $RFKill ]]; then
		disable_rf "$interface" "$RFKill"
	fi
}

# Main logic functions
#

function status() {
	report_aligned "Interface used"                       "$INTERFACE"
	report_aligned "Auto-wireless state"                  "$STATE"
	[[ "$STATE" != "halted" ]]                  || return
	report_aligned "Auto-wireless mode"                   "$MODE"
	[[ "$STATE" == "running" ]]                 || return

	declare -A wpa_data

	while IFS='=' read key value; do
		wpa_data["$key"]="$value"
	done < <(wpa_call "$INTERFACE" status)

	if [[ "${wpa_data[id_str]}" ]]; then
		report_aligned "Profile running"                  "${wpa_data[id_str]}"
	fi

	if (( WPA_STATUS )); then
		if (( "${#WPA_FIELDS[@]}" )); then
			set -- "${WPA_FIELDS[@]}"
		else
			set -- "${!wpa_data[@]}"
		fi

		report_notice "WPA information:"
		for key in "$@"; do
			report_aligned "${key}" "${wpa_data["$key"]}" 4
		done
	fi
}

function stop() {
	report_debug "Stopping interface '$INTERFACE'"

	write_runfile

	declare -A wpa_data
	while IFS='=' read key value; do
		wpa_data["$key"]="$value"
	done < <(wpa_call "$INTERFACE" status)

	### from netctl:lib/connections/wireless -- wireless stop

	if [[ "${wpa_data[id_str]}" ]]; then
		load_profile "${wpa_data[id_str]}"
		ip_unset
	fi

	wpa_stop "$INTERFACE"
	timeout_wait 1 '[[ ! -e "$ACTIOND_PIDFILE" ]]' || kill $(< "$ACTIOND_PIDFILE" )
	bring_interface_down_with_rfkill "$INTERFACE"
}

function reconfigure() {
	report_debug "Reconfiguring interface '$INTERFACE'"

	if ! interface_is_up "$INTERFACE" && ! is_yes "${ForceConnect:-no}"; then
		quit 3 "The interface '$INTERFACE' is not up"
	fi

	# Generate the configuration
	if ! prepare_wpa_config; then
		quit 1 "Could not create the configuration file for interface '$INTERFACE'"
	fi

	wpa_call "$INTERFACE" reconfigure > /dev/null
}

function start() {
	report_debug "Starting on interface '$INTERFACE'"

	### from netctl:lib/network -- overall start

	if interface_is_up "$INTERFACE" && ! is_yes "${ForceConnect:-no}"; then
		quit 3 "The interface '$INTERFACE' is already up"
	fi

	### from netctl:lib/connections/wireless, netctl:netctl-auto -- wireless-specific start

	# Default settings
	: ${WPADriver:=nl80211,wext}
	WPAOptions+=" -W"
	: ${TimeoutWPA:=15}

	if [[ $RFKill ]]; then
		if ! enable_rf "$INTERFACE" "$RFKill"; then
			quit 3 "Could not enable RF on interface '$INTERFACE'"
		fi
	fi

	# Kill any lingering WPA supplicants
	WPAConfigFile= wpa_stop "$INTERFACE" &> /dev/null

	# Generate the configuration
	if ! prepare_wpa_config; then
		bring_interface_down_with_rfkill "$INTERFACE"
		quit 1 "Could not create the configuration file for interface '$INTERFACE'"
	fi

	# Start the WPA supplicant
	if ! wpa_start "$INTERFACE" "$WPADriver" "$WPA_CONF" || \
	   ! check_pidfile "$SUPPLICANT_PIDFILE"; then
		bring_interface_down_with_rfkill "$INTERFACE"
		quit 3 "The WPA supplicant did not start for interface '$INTERFACE'"
	fi

	# Bring interface up after starting wpa_supplicant
	# This is important since cards such as iwl3945 do not support
	# mode switching when they are already up.
	if ! bring_interface_up "$INTERFACE"; then
		wpa_stop "$INTERFACE"
		bring_interface_down_with_rfkill "$INTERFACE"
		quit 3 "Could not bring the interface '$INTERFACE' up"
	fi

	# Start the wpa_actiond.
	if ! "$AUTOWIFI" -p "$WPA_CTRL_PATH" -i "$INTERFACE" -a "$ACTION_SCRIPT" -P "$ACTIOND_PIDFILE" || \
	   ! check_pidfile "$ACTIOND_PIDFILE"; then
		wpa_stop "$INTERFACE"
		bring_interface_down_with_rfkill "$INTERFACE"
		quit 3 "The wpa_actiond did not start for interface '$INTERFACE'"
	fi
}

# Power management functions
#

# By default, if no on_ac_power exists or its execution fails, think like we are on AC power (standalone PC)
function is_on_ac_power() {
	local HELPER
	HELPER=$(which on_ac_power 2>/dev/null)
	if [[ -x "$HELPER" ]]; then
		"$HELPER"
		case "$?" in
			0)
				report_debug "On AC power"
				return 0
				;;
			1)
				report_debug "_Not_ on AC power"
				return 1
				;;
			*)
				report_error "Failed to execute \"on_ac_power\"; defaulting to AC power"
				return 0
				;;
		esac
	else
		report_error "Could not find \"on_ac_power\"; defaulting to AC power"
		return 0
	fi
}

# Parameter parsing subroutines
#

function old_mode() {
	[[ -n "$MODE" ]] || couldnot "read previous mode"
	REQ_MODE="$MODE"
}

function parse_shortmode() {
	case $1 in
		c|continuous)
			REQ_MODE=continuous
			;;
		o|once)
			REQ_MODE=once
			;;
		h|halt)
			# On halt, we also attempt to read a run-file.
			# This is to make suspending possible within systemd's cgroup.
			do_runfile || REQ_MODE=halt

			# NOTE: If we received the halt mode through arguments, remember this
			# (see runtime status checking)
			_IS_HALTING=1
			;;
		su|suspend)
			REQ_MODE=suspend
			;;
		res|resume)
			REQ_MODE=resume
			;;
		l|last)
			REQ_MODE=last
			;;
		rec|reconfigure)
			# On reconfigure, we also attempt to read a run-file.
			# This is to make mode-switching possible within systemd's cgroup.
			do_runfile || REQ_MODE=reconfigure
			;;
		n|noop)
			REQ_MODE=noop
			;;
		b|bootup)
			do_runfile || do_bootup
			;;
		p|power)
			do_power
			;;
		st|status)
			REQ_MODE=status
			;;
		*)
			return 1
			;;
	esac
}

function parse_parameters() {
	report_debug "Parsing parameters: $*"
	local _dbg_parameters="$*"

	local parameter

	while true; do
		(( $# )) || break
		parameter="$1"
		shift

		case $parameter in
			--suspended)
				REQ_STATE="suspended"
				;;
			--running)
				REQ_STATE="running"
				;;
			--quiet|-q)
				QUIET=1
				;;
			--nolock)
				# This is passed when inner layer is invoked by the outer.
				# It means:
				# 1) do not acquire the lock.
				NOLOCK=1
				;;
			--)
				;;
			help|--help)
				usage
				return 1
				;;
			--version)
				version
				return 1
				;;
			--wpa)
				WPA_STATUS=1

				WPA_FIELDS=( ${1//,/ } )
				shift
				;;
			*)
				if ! parse_shortmode "$parameter"; then
					if is_interface "$parameter"; then
						INTERFACES+=( "$parameter" )
					else
						report_error "\"$parameter\" is neither an existing interface nor a known target";
						echo ""
						usage
						return 1
					fi
				fi
				;;
			esac
	done
	report_debug "Completed parsing parameters: $_dbg_parameters"
	return 0
}

# Main execution flow
#

# Parse options
OPTS=$( getopt -n "$0" -l "suspended,running,quiet,help,version,inner,nolock,wpa::" -o "q" -- "$@" )
(( $? )) && exit 1
eval set -- $OPTS

# Configs
[[ -r "$CONFIG" ]] && source "$CONFIG" || report_error "cannot read the configuration file: $CONFIG"

REQ_STATE="halted"
REQ_MODE=""
declare -ga INTERFACES

# Parse parameters
parse_parameters "$@" || exit 1

# Load default command, if needed
[[ -n "$REQ_MODE" ]] || exec_from_config DEFAULT

# Verify that all data is given
[[ -n "$REQ_MODE" ]] || quit 1 "Target mode not given"

# Multi-interface support routines
#

function list_state_files() {
	find "$STATE_DIR" -mindepth 1 -maxdepth 1 -type f -name 'netctl-auto-ng-*.state'
}

function list_interfaces_in_state() {
	while read file; do
		[[ "$(< "$file" )" == "$1" ]] && echo "$( basename "$file" )"
	done < <(list_state_files) | sed -re 's/^netctl-auto-ng-(.*)\.state$/\1/'
}

# WARNING: operation for each interface (beginning with a call to load_interface)
# is supposed to be placed inside own sub-shell, since the code
# a) alters decoded parameters as it proceeds, and
# b) uses "exit" to terminate execution in case of errors.
function load_interface() {
	[ -n "$1" ]       || quit 1 "Interface name is empty"
	is_interface "$1" || quit 1 "Interface '$1' does not exist"

	# Global interface-specific variables
	INTERFACE="$1"
	local STATE_FILE_PREFIX="netctl-auto-ng-$INTERFACE"

	HALT_SCRIPT="$STATE_DIR/${STATE_FILE_PREFIX}.suspend-script"
	MODE_FILE="$STATE_DIR/${STATE_FILE_PREFIX}.mode"
	STATE_FILE="$STATE_DIR/${STATE_FILE_PREFIX}.state"
	LOCK_FILE="$STATE_DIR/${STATE_FILE_PREFIX}.lock"
	RUN_FILE="$STATE_DIR/${STATE_FILE_PREFIX}.run"

	ACTIOND_PIDFILE="/run/wpa_actiond_$INTERFACE.pid"
	SUPPLICANT_PIDFILE="/run/wpa_supplicant_$INTERFACE.pid"

	# Read state data
	[[ -r "$MODE_FILE" ]] && MODE=$(< "$MODE_FILE")
	[[ -r "$STATE_FILE" ]] && STATE=$(< "$STATE_FILE") || STATE="halted"

	# Load interface-specific data
	if [[ -x "$PROFILE_DIR/interfaces/$INTERFACE" ]]; then
		source "$PROFILE_DIR/interfaces/$INTERFACE"
	fi

	# Systemd reports daemons as "stopped" when they are in process of shutting down.
	# Handle this.
	# Actually, systemd does not commit a stop if a service was not running, so it is relatively safe
	# to assume that we were running if called from the systemd stop/halt sequence.
	if systemd_run --quiet is-active || (( _IS_HALTING )); then

		report_debug "Systemd status: ACTIVE"
		_IS_RUNNING=1

	else
		report_debug "Systemd status: STOPPED"
	fi

	# Fix $STATE if needed
	case "$STATE" in
		running)
			if (( _IS_RUNNING )); then
				_DAEMON_STATE="running"
				_DAEMON_REPORT="report_notice"
			else
				_DAEMON_STATE="unknown stopped (resetting state-file)"
				_DAEMON_REPORT="report_error"
				rm "$STATE_FILE"
				STATE="halted"
			fi
			;;
		*)
			if (( _IS_RUNNING )); then
				_DAEMON_STATE="running (setting state-file to running)"
				_DAEMON_REPORT="report_error"
				echo "running" > "$STATE_FILE"
				STATE="running"
			else
				_DAEMON_STATE="$STATE"
				_DAEMON_REPORT="report_notice"
			fi
			;;
	esac

	unset _IS_HALTING _IS_RUNNING

	# Report minimal status information and check runtime status
	report_debug "Target min-state: $REQ_STATE"

	if [[ "$REQ_MODE" != "status" ]] && ! (( QUIET )); then
		report_notice "Using interface: $INTERFACE"
		report_notice "Target: $REQ_MODE"
		eval "$_DAEMON_REPORT" "'Daemon state: ${_DAEMON_STATE} ${MODE:+(in $MODE mode)}'"
	fi

	unset _DAEMON_STATE _DAEMON_REPORT

	# Set requirements and perform actions for special targets
	case "$REQ_MODE" in
		reconfigure)
			REQ_STATE="running"
			old_mode
			;;
		resume)
			REQ_STATE="suspended"
			old_mode
			;;
		last)
			old_mode
			;;
		suspend)
			REQ_STATE="running"
			;;
		halt)
			[[ "$STATE" = "halted" ]] && noop
			;;
		noop)
			noop
			;;
		status)
			status
			exit 0
			;;
	esac

	# Check for requirements
	case "$REQ_STATE" in
		running)
			[[ "$STATE" = "halted" || "$STATE" = "suspended" ]] && ignore_req
			;;
		suspended)
			[[ "$STATE" = "halted" ]] && ignore_req
			;;
	esac

	# Privileges and locking
	if (( UID )); then
		quit 2 "Shall be run as root"
	fi

	do_lock || quit 2 "Could not acquire the lock"
}
