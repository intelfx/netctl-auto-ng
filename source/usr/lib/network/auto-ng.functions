#!/bin/bash

# Primary debug hook
[[ -e "/tmp/.netctl-auto-wireless-debug" ]] && { QUIET=0; NETCTL_DEBUG=1; }

. /usr/lib/network/globals
. "$CONN_DIR/wireless"

NAW_VERSION=unpackaged

AUTOWIFI="/usr/sbin/wpa_actiond"
ACTION_SCRIPT="/usr/lib/network/auto-ng.action"
WPA_CTRL_PATH="/run/wpa_supplicant"
CONFIG="/etc/conf.d/netctl-auto-wireless"
GLOBAL_CONFIG="/etc/conf.d/netctl"

HALT_SCRIPT="$STATE_DIR/netctl-auto-wireless-ng.suspend-script"
MODE_FILE="$STATE_DIR/netctl-auto-wireless-ng.mode"
INTERFACES_FILE="$STATE_DIR/netctl-auto-wireless-ng.interfaces"
STATE_FILE="$STATE_DIR/netctl-auto-wireless-ng.state"
LOCK_FILE="$STATE_DIR/netctl-auto-wireless-ng.lock"
RUN_FILE="$STATE_DIR/netctl-auto-wireless-ng.run"

function version() {
	echo "netctl-auto-wireless $NAW_VERSION"
}

# Locking and PID-files
#
LOCKTIMEOUT=10
EXIT_SIGNALS=(TERM HUP INT QUIT)

function release_lock() {
	report_debug "Dropping lock $LOCK_FILE"
	exec 4<&-
}

function do_trap() {
	report_debug "Installing termination handlers (signals ${EXIT_SIGNALS[*]}) to function $1"
	trap "$1" "${EXIT_SIGNALS[@]}"
}

function do_lock() {
	report_debug "Locking file $LOCK_FILE"
	touch "$LOCK_FILE"
	exec 4<"$LOCK_FILE"
	flock -x -w "$LOCKTIMEOUT" 4
	trap release_lock 0
	return "$?"
}

function check_pidfile() {
	report_debug "Checking PID-file $1"
	pgrep -F "$1" &>/dev/null
}

# Systemd integration functions
#

function systemd_run() {
	local SYSTEMD_UNIT="netctl-auto-wireless-ng@${INTERFACE}.service"
	systemctl "$@" "$SYSTEMD_UNIT"
}

# Status reporting primitives
#
align_column=25
[[ -t 1 ]] && align_separator="$(tput hpa $align_column)"

function quit() {
	if (( $1 )); then
		report_fail "$2"
	else
		report_notice "$2"
	fi
	exit $1
}

function report_aligned() {
	(( QUIET )) && return

	local sep="$align_separator"
	local left_margin="${3:-0}"
	local key_len="$(( ${#1} + left_margin ))"

	[[ -z "$sep" ]] && sep="$( printf "%$(( align_column - key_len - 2 ))s" )"
	echo -n "$( printf "%${left_margin}s" )"
	report_notice "${1}: ${sep}${2}"
}

# Helpers for reporting status
#
function ignore_req() {
	quit 0 "Ignoring request (requested at least $REQ_STATE, now $STATE)"
}

function noop() {
	quit 0 "Nothing to do (asked to $REQ_MODE, now $STATE)"
}

function couldnot() {
	quit 1 "Could not $1 in order to $REQ_MODE"
}

# Auxiliary subroutines
#

function need_exec_from_config() {
	local DO_CMD=$(eval echo '$NAW_DO_CMD_'"$1")
	report_debug "Checking requirement of execution of command $1: variable name is NAW_DO_CMD_$1, result is $DO_CMD"
	if (( {DO_CMD:-0} )); then
		return 0
	else
		return 1
	fi
}

function get_cmd_from_config() {
	local CMD=$(eval echo '$NAW_CMD_'"$1")
	report_debug "Querying command $1: variable name is NAW_CMD_$1, result is $CMD"
	[[ -n "$2" ]] && CMD="$CMD $2"
	echo "$CMD"
}

function exec_from_config() {
	if need_exec_from_config "$1"; then
		local CMD="$(get_cmd_from_config "$@") $INTERFACE"
		report_debug "Executing self via reparse: $CMD"
		parse_parameters $CMD
	else
		report_debug "Execution of command $1 disabled by config"
		parse_parameters noop
		return 0
	fi
}

function prepare_config() {
	report_debug "Building wpa_supplicant configuration for $INTERFACE"
	WPA_CONF="$(make_wpa_config_file $INTERFACE)"

	if [[ -n "${AUTO_PROFILES}" ]]; then
		for prof in "${AUTO_PROFILES[@]}"; do echo "$prof"; done
	else
		list_profiles
	fi | while read profile; do
		(
		load_profile "$profile"

		[[ "$CONNECTION" != "wireless" ]] && exit 1
		[[ "$SECURITY" == "wpa-config" ]] && exit 1

		SECURITY="${SECURITY:-none}"
		printf "network={\n%s\nid_str=\"%s\"\n}\n" "$(make_wpa_config)" "$profile" >> $WPA_CONF
		)
	done
}

function write_runfile() {
	# This writes the run-file on default halt/suspend operations.
	rm -f "$RUN_FILE"
	echo "$MODE" >> "$RUN_FILE"
}

function write_runfile_outer() {
	# This writes the run-file when passing to the inner layer.
	rm -f "$RUN_FILE"
	(( QUIET ))                 && echo "--quiet"      >> "$RUN_FILE"
	[[ "$REQ_STATE" != "halted" ]] && echo "--$REQ_STATE" >> "$RUN_FILE"
	                                  echo "$REQ_MODE"    >> "$RUN_FILE"
	                                  echo "--nolock"     >> "$RUN_FILE"
}

# Auxiliary logic functions
#

function do_bootup() {
	local RUN_CMD
	is_on_ac_power && RUN_CMD="BOOT_AC" || RUN_CMD="BOOT_BATTERY"
	exec_from_config "$RUN_CMD"
}

function do_power() {
	local RUN_CMD
	is_on_ac_power && RUN_CMD="SW_AC" || RUN_CMD="SW_BATTERY"
	exec_from_config "$RUN_CMD"
}

function do_runfile() {
	if (( INNER )) && [[ -r "$RUN_FILE" ]]; then
		local CMD="$(< "$RUN_FILE" )"
		local _IS_PARSING_RUNFILE=1
		rm -f "$RUN_FILE"
		report_notice "Executing run-file: $CMD"
		parse_parameters $CMD
	else
		report_debug "Run-file does not exist or not in inner mode, skipping"
		return 1
	fi
}

# Main logic functions
#

function status() {
	report_aligned "Interface used"                       "$INTERFACE"
	report_aligned "Auto-wireless state"                  "$STATE"
	[[ "$STATE" != "halted" ]]                  || return
	report_aligned "Auto-wireless mode"                   "$MODE"
	[[ "$STATE" == "running" ]]                 || return
	[[ -e "$STATE_DIR/interfaces/$INTERFACE" ]] || return
	report_aligned "Profile running"                      "$(< "$STATE_DIR/interfaces/$INTERFACE")"

	if [[ "$1" = "wpa" ]]; then
		shift
		declare -A wpa_data

		while IFS='=' read key value; do
			wpa_data["$key"]="$value"
		done < <(wpa_cli -p "$WPA_CTRL_PATH" -i "$INTERFACE" status)

		(( $# )) || set -- "${!wpa_data[@]}"

		report_notice "WPA information:"
		for key in "$@"; do
			report_aligned "${key}" "${wpa_data["$key"]}" 4
		done
	fi
}

function stop() {
	report_debug "Stopping $INTERFACE at $WPA_CTRL_PATH"

	write_runfile

	# Load interface specific config
	[[ -f "$IFACE_DIR/$INTERFACE" ]] && source "$IFACE_DIR/$INTERFACE"

	netctl -D "$INTERFACE"
	timeout_wait 1 '[[ ! -f "$ACTIOND_PIDFILE" ]]' || kill $(< "$ACTIOND_PIDFILE")
	stop_wpa "$INTERFACE"
	if [[ "$RFKILL" == "soft" ]]; then
		set_rf_state "$INTERFACE" disabled "$RFKILL_NAME"
	fi
}

function reconfigure() {
	report_debug "Reconfiguring $INTERFACE"

	# Load interface specific config
	[[ -f "$IFACE_DIR/$INTERFACE" ]] && source "$IFACE_DIR/$INTERFACE"

	prepare_config
	wpa_reconfigure "$INTERFACE"
}

function start() {
	report_debug "Starting $INTERFACE"

	# Load interface specific config
	[[ -f "$IFACE_DIR/$INTERFACE" ]] && source "$IFACE_DIR/$INTERFACE"

	netctl -D "$INTERFACE"

	# Kill any existing wpa_supplicant on this interface
	stop_wpa "$INTERFACE"

	# Do PRE_UP
	( eval $PRE_UP ) || { quit 3 "PRE_UP failed"; }
	enable_rf "$INTERFACE" "$RFKILL" "$RFKILL_NAME" || { quit 3 "Failed to enable radio (rfkill)"; }

	prepare_config

	start_wpa "$INTERFACE" "$WPA_CONF" "${WPA_DRIVER:-nl80211,wext}" "-W $WPA_OPTS" \
		&& check_pidfile "$SUPPLICANT_PIDFILE" \
		|| { quit 3 "Failed to start wpa_supplicant"; }

	eval $AUTOWIFI -p "$WPA_CTRL_PATH" -i "$INTERFACE" -P "$ACTIOND_PIDFILE" -a "$ACTION_SCRIPT" \
		&& check_pidfile "$ACTIOND_PIDFILE" \
		|| { quit 3 "Failed to start wpa_actiond"; }
}

# Power management functions
#

# By default, if no on_ac_power exists or its execution fails, think like we are on AC power (standalone PC)
function is_on_ac_power() {
	local HELPER
	HELPER=$(which on_ac_power 2>/dev/null)
	if [[ -x "$HELPER" ]]; then
		"$HELPER"
		case "$?" in
			0)
				report_debug "On AC power"
				return 0
				;;
			1)
				report_debug "_Not_ on AC power"
				return 1
				;;
			*)
				report_err "Failed to execute \"on_ac_power\"; defaulting to AC power"
				return 0
				;;
		esac
	else
		report_err "Could not find \"on_ac_power\"; defaulting to AC power"
		return 0
	fi
}

# Parameter parsing subroutines
#

function old_mode() {
	[[ -n "$MODE" ]] || couldnot "read previous mode"
	REQ_MODE="$MODE"
}

function parse_shortmode() {
	case $1 in
		c|continuous)
			REQ_MODE=continuous
			;;
		o|once)
			REQ_MODE=once
			;;
		h|halt)
			# On halt, we also attempt to read a run-file.
			# This is to make suspending possible within systemd's cgroup.
			do_runfile || REQ_MODE=halt

			# NOTE: If we received the halt mode through arguments, remember this
			# (see runtime status checking)
			_IS_HALTING=1
			;;
		su|suspend)
			REQ_MODE=suspend
			;;
		res|resume)
			REQ_MODE=resume
			;;
		rec|reconfigure)
			# On reconfigure, we also attempt to read a run-file.
			# This is to make mode-switching possible within systemd's cgroup.
			do_runfile || REQ_MODE=reconfigure
			;;
		n|noop)
			REQ_MODE=noop
			;;
		b|bootup)
			do_runfile || do_bootup
			;;
		p|power)
			do_power
			;;
		st|status)
			REQ_MODE=status
			;;
		*)
			return 1
			;;
	esac
}

function parse_parameters() {
	report_debug "Parsing parameters: $*"
	for parameter; do
		case $parameter in
			--suspended)
				REQ_STATE="suspended"
				;;
			--running)
				REQ_STATE="running"
				;;
			--quiet|-q)
				QUIET=1
				;;
			--nolock)
				# This is passed when inner layer is invoked by the outer.
				# It means:
				# 1) do not acquire the lock.
				NOLOCK=1
				;;
			--)
				;;
			help|--help)
				usage
				return 1
				;;
			--version)
				version
				return 1
				;;
			*)
				if ! parse_shortmode "$parameter"; then
					if is_interface "$parameter"; then
						INTERFACE="$parameter"
					else
						report_fail "\"$parameter\" is neither an existing interface nor a known target";
						echo ""
						usage
						return 1
					fi
				fi
				;;
			esac
	done
	report_debug "Completed parsing parameters: $*"
	return 0
}

# Main execution flow
#

# Parse options
OPTS=$( getopt -n "$0" -l "suspended,running,quiet,help,version,inner,nolock" -o "q" -- "$@" )
(( $? )) && exit 1
eval set -- $OPTS

# Configs
[[ -r "$CONFIG" ]] && source "$CONFIG" || report_err "cannot read the configuration file: $CONFIG"

# Read variables
[[ -r "$MODE_FILE" ]] && MODE=$(< "$MODE_FILE")
[[ -r "$STATE_FILE" ]] && STATE=$(< "$STATE_FILE") || STATE="halted"
REQ_STATE="halted"
REQ_MODE=""

# Parse parameters
parse_parameters "$@" || exit 1

# Systemd reports daemons as "stopped" when they are in process of shutting down.
# Handle this.
# Actually, systemd does not commit a stop if a service was not running, so it is relatively safe
# to assume that we were running if called from the systemd stop/halt sequence.
if systemd_run --quiet is-active || (( _IS_HALTING )); then

	report_debug "Systemd status: ACTIVE"
	_IS_RUNNING=1

else
	report_debug "Systemd status: STOPPED"
fi

# Fix $STATE if needed
case "$STATE" in
	running)
		if (( _IS_RUNNING )); then
			_DAEMON_STATE="running"
			_DAEMON_REPORT="report_notice"
		else
			_DAEMON_STATE="unknown stopped (resetting state-file)"
			_DAEMON_REPORT="report_err"
			rm "$STATE_FILE"
			STATE="halted"
		fi
		;;
	*)
		if (( _IS_RUNNING )); then
			_DAEMON_STATE="running (setting state-file to running)"
			_DAEMON_REPORT="report_err"
			echo "running" > "$STATE_FILE"
			STATE="running"
		else
			_DAEMON_STATE="$STATE"
			_DAEMON_REPORT="report_notice"
		fi
		;;
esac

unset _IS_HALTING _IS_RUNNING

# Report minimal status information and check runtime status
report_debug "Target min-state: $REQ_STATE"

if [[ "$REQ_MODE" != "status" ]] && ! (( QUIET )); then
	eval "$_DAEMON_REPORT" "'Daemon state: $_DAEMON_STATE (in $MODE mode)'"
	report_notice "Target: $REQ_MODE"
fi

unset _DAEMON_STATE _DAEMON_REPORT

# Set requirements and perform actions for special targets
case "$REQ_MODE" in
	reconfigure)
		REQ_STATE="running"
		old_mode
		;;
	resume)
		REQ_STATE="suspended"
		old_mode
		;;
	last)
		old_mode
		;;
	suspend)
		REQ_STATE="running"
		;;
	halt)
		[[ "$STATE" = "halted" ]] && noop
		;;
	noop)
		noop
		;;
	status)
		status
		exit 0
		;;
esac

# Check for requirements
case "$REQ_STATE" in
	running)
		[[ "$STATE" = "halted" || "$STATE" = "suspended" ]] && ignore_req
		;;
	suspended)
		[[ "$STATE" = "halted" ]] && ignore_req
		;;
esac

# Privileges and locking
if (( UID )); then
	quit 2 "Shall be run as root"
fi

if ! (( NOLOCK )); then
	do_lock || quit 2 "Could not acquire the lock"
fi
